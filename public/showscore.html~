<html>
<title>Credit Score</title>
<head>
<script src="https://d3js.org/d3.v3.min.js"></script>
</head>
<style>
p {
    background: #1abc9c;
    color: #fff;
    height: 30px;
    width: 500px;
    display: inline-block;
    font-size: 0.8em;
    margin-right: 4px;
    line-height: 30px;
    font-size: 100%;
    text-align: center;
    text-shadow: 0 1px 0 rgba(255,255,255,0.2);
    border-radius: 15px 15px 15px 0px;
}

path {
  stroke: #fff;
}

text {
  font-family: Arial, sans-serif;
  font-size: 12px;
}

#show {
display: none;
}

</style>
<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js">  </script>
<body bgcolor="#D8BFD8">
<div align="center">
<p>Score generated from static fields:</p>
<p id="score1"></p>
<p>Score generated from historical data:</p>
<p id="score2"></p>
<p>Total score out of 100:</p>
<p id="Total"></p>
<h1>Personality Insights</h1>
<br>
<input type="text" id="person">
<input type="button" value="Submit" onclick="sunburst()">
<input type="button" id="show" value="Show Sunburst" onclick="show()">
<br>
<h3>Sunburst Chart</h3>
<br>
</div>
<script>

var file = "../data/smename.json";
var smename;
var file1,file2;
var score1,score2;
   $.getJSON(file, {}, function(data){
	smename=data.Name;
	file1 = "../data/"+smename+".json";
	file2="../data/"+smename+"1.json";
	
	   
   	$.getJSON(file1, {}, function(data1){
		score1=data1.Score1*1;
		document.getElementById("score1").innerHTML = score1;
		
		$.getJSON(file2, {}, function(data2){
			score2=data2.score2*1;
			document.getElementById("score2").innerHTML = score2;
			document.getElementById("Total").innerHTML = (score1*0.7+score2);
   		});
   	});
   
   });
   
function sunburst() {
$.post("/sunburst", {Name:document.getElementById("person").value}, function(data){

while(1) {
	console.log(""+data);	
	if(data==1) {
		$("#show").show();
		break;
	}
    }
});
}

function show() {

var width = 960,
    height = 700,
    radius = Math.min(width, height) / 2;

var x = d3.scale.linear()
    .range([0, 2 * Math.PI]);

var y = d3.scale.linear()
    .range([0, radius]);

var color = d3.scale.category20c();

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("transform", "translate(" + width / 2 + "," + (height / 2 + 10) + ")");

var partition = d3.layout.partition()
    .value(function(d) { return d.percentage; });

var arc = d3.svg.arc()
    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
    .innerRadius(function(d) { return Math.max(0, y(d.y)); })
    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });

d3.json("../data/person.json", function(error, root) {
  var g = svg.selectAll("g")
      .data(partition.nodes(root))
    .enter().append("g");

  var path = g.append("path")
    .attr("d", arc)
    .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
    .on("click", click);

  var text = g.append("text")
    .attr("transform", function(d) { return "rotate(" + computeTextRotation(d) + ")"; })
    .attr("x", function(d) { return y(d.y); })
    .attr("dx", "6") // margin
    .attr("dy", ".35em") // vertical-align
    .text(function(d) { return (d.name+"("+d.percentage.toFixed(2)+")"); });

  function click(d) {
    // fade out all text elements
    text.transition().attr("opacity", 0);

    path.transition()
      .duration(750)
      .attrTween("d", arcTween(d))
      .each("end", function(e, i) {
          // check if the animated element's data e lies within the visible angle span given in d
          if (e.x >= d.x && e.x < (d.x + d.dx)) {
            // get a selection of the associated text element
            var arcText = d3.select(this.parentNode).select("text");
            // fade in the text element and recalculate positions
            arcText.transition().duration(750)
              .attr("opacity", 1)
              .attr("transform", function() { return "rotate(" + computeTextRotation(e) + ")" })
              .attr("x", function(d) { return y(d.y); });
          }
      });
  }
});

d3.select(self.frameElement).style("height", height + "px");

// Interpolate the scales!
function arcTween(d) {
  var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
      yd = d3.interpolate(y.domain(), [d.y, 1]),
      yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
  return function(d, i) {
    return i
        ? function(t) { return arc(d); }
        : function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
  };
}

function computeTextRotation(d) {
  return (x(d.x + d.dx / 2) - Math.PI / 2) / Math.PI * 180;
}

}

</script>

</body>
</html>
